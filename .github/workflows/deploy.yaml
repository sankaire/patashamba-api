name: Build and Deploy
on:
  push:
    branches:
      - main
jobs:
  build:
    name: Build and push
    runs-on: ubuntu-latest
    steps:

    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-3

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - run: docker build --tag patashamba/api:v1 .
    - name: Push to ECR
      id: ecr
      uses: jwalton/gh-ecr-push@v1
      with:
        access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        region: eu-west-3
        image: my-image:v1
  # terraform:
  #   name:  Terraform
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       shell: bash
  #       working-directory: ./deploy

  #   steps:
  #   # Checkout the repository to the GitHub Actions runner
  #   - name: Checkout
  #     uses: actions/checkout@v3

  #   # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
  #   - name: Setup Terraform
  #     uses: hashicorp/setup-terraform@v1
  #     with:
  #       cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
  #       terraform_wrapper: false

  #   - name: Setup Terraform backend variables
  #     working-directory: ./deploy
  #     id: backend
  #     run: |-
  #       cat > backend.tfvars <<EOF
  #       access_key = "${{ secrets.AWS_ACCESS_KEY_ID }}"
  #       secret_key = "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
  #       EOF
  #   # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
  #   - name: Terraform Init
  #     run: terraform init --backend-config="backend.tfvars"

  #   - name: Setup Terraform variables
  #     working-directory: ./terraform
  #     id: vars
  #     run: |-
  #       cat > pipeline.tfvars <<EOF
  #       access_key = "${{ secrets.AWS_ACCESS_KEY_ID }}"
  #       secret_key = "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
  #       EOF

  #   - name: Terraform Apply
  #     id: apply
  #     run: |
  #       terraform apply --auto-approve --var-file=pipeline.tfvars